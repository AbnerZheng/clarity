/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var io_casperlabs_comm_discovery_node_pb = require('../../../../io/casperlabs/comm/discovery/node_pb.js');
goog.exportSymbol('proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.diagnostics.Peers', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.displayName = 'proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingreceivercount: msg.getPingreceivercount(),
    lookupreceivercount: msg.getLookupreceivercount(),
    disconnectreceivercount: msg.getDisconnectreceivercount(),
    connects: msg.getConnects(),
    p2pencryptionhandshakereceivercount: msg.getP2pencryptionhandshakereceivercount(),
    p2pprotocolhandshakereceivercount: msg.getP2pprotocolhandshakereceivercount(),
    peers: msg.getPeers(),
    from: msg.getFrom(),
    to: msg.getTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics;
  return proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPingreceivercount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLookupreceivercount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDisconnectreceivercount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConnects(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setP2pencryptionhandshakereceivercount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setP2pprotocolhandshakereceivercount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPingreceivercount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getLookupreceivercount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getDisconnectreceivercount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getConnects();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getP2pencryptionhandshakereceivercount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getP2pprotocolhandshakereceivercount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getPeers();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = this.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = this.getTo();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics} The clone.
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 pingReceiverCount = 1;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getPingreceivercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setPingreceivercount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 lookupReceiverCount = 2;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getLookupreceivercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setLookupreceivercount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 disconnectReceiverCount = 3;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getDisconnectreceivercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setDisconnectreceivercount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 connects = 4;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getConnects = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setConnects = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 p2pEncryptionHandshakeReceiverCount = 5;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getP2pencryptionhandshakereceivercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setP2pencryptionhandshakereceivercount = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 p2pProtocolHandshakeReceiverCount = 6;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getP2pprotocolhandshakereceivercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setP2pprotocolhandshakereceivercount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 peers = 7;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setPeers = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 from = 8;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 to = 9;
 * @return {number}
 */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.diagnostics.NodeCoreMetrics.prototype.setTo = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.diagnostics.Peers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.diagnostics.Peers.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.diagnostics.Peers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.diagnostics.Peers.displayName = 'proto.io.casperlabs.node.api.diagnostics.Peers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.diagnostics.Peers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.diagnostics.Peers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.diagnostics.Peers} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    io_casperlabs_comm_discovery_node_pb.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.diagnostics.Peers}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.diagnostics.Peers;
  return proto.io.casperlabs.node.api.diagnostics.Peers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.diagnostics.Peers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.diagnostics.Peers}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new io_casperlabs_comm_discovery_node_pb.Node;
      reader.readMessage(value,io_casperlabs_comm_discovery_node_pb.Node.deserializeBinaryFromReader);
      msg.getPeersList().push(value);
      msg.setPeersList(msg.getPeersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.diagnostics.Peers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.diagnostics.Peers.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      io_casperlabs_comm_discovery_node_pb.Node.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.diagnostics.Peers} The clone.
 */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.diagnostics.Peers} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated io.casperlabs.comm.discovery.Node peers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.comm.discovery.Node>}
 */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.comm.discovery.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, io_casperlabs_comm_discovery_node_pb.Node, 1));
};


/** @param {Array.<!proto.io.casperlabs.comm.discovery.Node>} value  */
proto.io.casperlabs.node.api.diagnostics.Peers.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.io.casperlabs.node.api.diagnostics.Peers.prototype.clearPeersList = function() {
  this.setPeersList([]);
};


goog.object.extend(exports, proto.io.casperlabs.node.api.diagnostics);
