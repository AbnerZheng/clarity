/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var io_casperlabs_casper_consensus_consensus_pb = require('../../../../io/casperlabs/casper/consensus/consensus_pb.js');
var io_casperlabs_casper_consensus_info_pb = require('../../../../io/casperlabs/casper/consensus/info_pb.js');
var io_casperlabs_casper_consensus_state_pb = require('../../../../io/casperlabs/casper/consensus/state_pb.js');
goog.exportSymbol('proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.DeployRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.GetBlockInfoRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.GetBlockStateRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.GetDeployInfoRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.ListDeployInfosRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.ListDeployInfosResponse', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StateQuery', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StreamEventsRequest', null, global);
goog.exportSymbol('proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.DeployRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.DeployRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.DeployRequest.displayName = 'proto.io.casperlabs.node.api.casper.DeployRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.DeployRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.DeployRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploy: (f = msg.getDeploy()) && io_casperlabs_casper_consensus_consensus_pb.Deploy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.DeployRequest}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.DeployRequest;
  return proto.io.casperlabs.node.api.casper.DeployRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.DeployRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.DeployRequest}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new io_casperlabs_casper_consensus_consensus_pb.Deploy;
      reader.readMessage(value,io_casperlabs_casper_consensus_consensus_pb.Deploy.deserializeBinaryFromReader);
      msg.setDeploy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.DeployRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.DeployRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeploy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      io_casperlabs_casper_consensus_consensus_pb.Deploy.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.DeployRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.DeployRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional io.casperlabs.casper.consensus.Deploy deploy = 1;
 * @return {proto.io.casperlabs.casper.consensus.Deploy}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.getDeploy = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_consensus_pb.Deploy, 1));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy|undefined} value  */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.setDeploy = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.casperlabs.node.api.casper.DeployRequest.prototype.clearDeploy = function() {
  this.setDeploy(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.node.api.casper.DeployRequest.prototype.hasDeploy = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.GetBlockInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.displayName = 'proto.io.casperlabs.node.api.casper.GetBlockInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHashBase16: msg.getBlockHashBase16(),
    blockHash: msg.getBlockHash_asB64(),
    view: msg.getView()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.GetBlockInfoRequest;
  return proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHashBase16(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.GetBlockInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string block_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.getBlockHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.setBlockHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional io.casperlabs.casper.consensus.info.BlockInfo.View view = 2;
 * @return {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View}
 */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} value  */
proto.io.casperlabs.node.api.casper.GetBlockInfoRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.displayName = 'proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: msg.getDepth(),
    maxRank: msg.getMaxRank(),
    view: msg.getView()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest;
  return proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDepth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxRank(value);
      break;
    case 3:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDepth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMaxRank();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 depth = 1;
 * @return {number}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.setDepth = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 max_rank = 2;
 * @return {number}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.getMaxRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.setMaxRank = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional io.casperlabs.casper.consensus.info.BlockInfo.View view = 3;
 * @return {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View}
 */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} value  */
proto.io.casperlabs.node.api.casper.StreamBlockInfosRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.GetDeployInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.displayName = 'proto.io.casperlabs.node.api.casper.GetDeployInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployHashBase16: msg.getDeployHashBase16(),
    deployHash: msg.getDeployHash_asB64(),
    view: msg.getView()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.GetDeployInfoRequest;
  return proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeployHashBase16(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployHash(value);
      break;
    case 2:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeployHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.GetDeployInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string deploy_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.getDeployHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.setDeployHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes deploy_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.getDeployHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes deploy_hash = 3;
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.getDeployHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployHash()));
};


/**
 * optional bytes deploy_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.getDeployHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.setDeployHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional io.casperlabs.casper.consensus.info.DeployInfo.View view = 2;
 * @return {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View}
 */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} value  */
proto.io.casperlabs.node.api.casper.GetDeployInfoRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.displayName = 'proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHashBase16: msg.getBlockHashBase16(),
    blockHash: msg.getBlockHash_asB64(),
    view: msg.getView()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest;
  return proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHashBase16(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string block_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.getBlockHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.setBlockHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional io.casperlabs.casper.consensus.info.DeployInfo.View view = 2;
 * @return {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View}
 */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} value  */
proto.io.casperlabs.node.api.casper.StreamBlockDeploysRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.StateQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.casper.StateQuery.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.StateQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.StateQuery.displayName = 'proto.io.casperlabs.node.api.casper.StateQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.casper.StateQuery.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.StateQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.StateQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StateQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyVariant: msg.getKeyVariant(),
    keyBase16: msg.getKeyBase16(),
    pathSegmentsList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.StateQuery}
 */
proto.io.casperlabs.node.api.casper.StateQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.StateQuery;
  return proto.io.casperlabs.node.api.casper.StateQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.StateQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.StateQuery}
 */
proto.io.casperlabs.node.api.casper.StateQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant} */ (reader.readEnum());
      msg.setKeyVariant(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyBase16(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getPathSegmentsList().push(value);
      msg.setPathSegmentsList(msg.getPathSegmentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.StateQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StateQuery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyVariant();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getKeyBase16();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPathSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.StateQuery} The clone.
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StateQuery} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional KeyVariant key_variant = 1;
 * @return {!proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant}
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.getKeyVariant = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant} value  */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.setKeyVariant = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string key_base16 = 2;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.getKeyBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.setKeyBase16 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string path_segments = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.getPathSegmentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.io.casperlabs.node.api.casper.StateQuery.prototype.setPathSegmentsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.io.casperlabs.node.api.casper.StateQuery.prototype.clearPathSegmentsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * @enum {number}
 */
proto.io.casperlabs.node.api.casper.StateQuery.KeyVariant = {
  KEY_VARIANT_UNSPECIFIED: 0,
  HASH: 1,
  UREF: 2,
  ADDRESS: 3,
  LOCAL: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.GetBlockStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.GetBlockStateRequest.displayName = 'proto.io.casperlabs.node.api.casper.GetBlockStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.GetBlockStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHashBase16: msg.getBlockHashBase16(),
    blockHash: msg.getBlockHash_asB64(),
    query: (f = msg.getQuery()) && proto.io.casperlabs.node.api.casper.StateQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.GetBlockStateRequest;
  return proto.io.casperlabs.node.api.casper.GetBlockStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHashBase16(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.node.api.casper.StateQuery;
      reader.readMessage(value,proto.io.casperlabs.node.api.casper.StateQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.node.api.casper.StateQuery.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.GetBlockStateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string block_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.getBlockHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.setBlockHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional StateQuery query = 2;
 * @return {proto.io.casperlabs.node.api.casper.StateQuery}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.getQuery = function() {
  return /** @type{proto.io.casperlabs.node.api.casper.StateQuery} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.node.api.casper.StateQuery, 2));
};


/** @param {proto.io.casperlabs.node.api.casper.StateQuery|undefined} value  */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.node.api.casper.GetBlockStateRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.displayName = 'proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHashBase16: msg.getBlockHashBase16(),
    blockHash: msg.getBlockHash_asB64(),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.io.casperlabs.node.api.casper.StateQuery.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest;
  return proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHashBase16(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.node.api.casper.StateQuery;
      reader.readMessage(value,proto.io.casperlabs.node.api.casper.StateQuery.deserializeBinaryFromReader);
      msg.getQueriesList().push(value);
      msg.setQueriesList(msg.getQueriesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.casperlabs.node.api.casper.StateQuery.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string block_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.getBlockHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.setBlockHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated StateQuery queries = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.node.api.casper.StateQuery>}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.node.api.casper.StateQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.node.api.casper.StateQuery, 2));
};


/** @param {Array.<!proto.io.casperlabs.node.api.casper.StateQuery>} value  */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.io.casperlabs.node.api.casper.BatchGetBlockStateRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.displayName = 'proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    io_casperlabs_casper_consensus_state_pb.StoredValueInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse;
  return proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new io_casperlabs_casper_consensus_state_pb.StoredValueInstance;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.StoredValueInstance.deserializeBinaryFromReader);
      msg.getValuesList().push(value);
      msg.setValuesList(msg.getValuesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      io_casperlabs_casper_consensus_state_pb.StoredValueInstance.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse} The clone.
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated io.casperlabs.casper.consensus.state.StoredValueInstance values = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.state.StoredValueInstance>}
 */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.state.StoredValueInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, io_casperlabs_casper_consensus_state_pb.StoredValueInstance, 2));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.state.StoredValueInstance>} value  */
proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.io.casperlabs.node.api.casper.BatchGetBlockStateResponse.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.ListDeployInfosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.displayName = 'proto.io.casperlabs.node.api.casper.ListDeployInfosRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountPublicKeyHashBase16: msg.getAccountPublicKeyHashBase16(),
    accountPublicKeyHash: msg.getAccountPublicKeyHash_asB64(),
    view: msg.getView(),
    pageSize: msg.getPageSize(),
    pageToken: msg.getPageToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.ListDeployInfosRequest;
  return proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountPublicKeyHashBase16(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountPublicKeyHash(value);
      break;
    case 2:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPageSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccountPublicKeyHashBase16();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAccountPublicKeyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.ListDeployInfosRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string account_public_key_hash_base16 = 1;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getAccountPublicKeyHashBase16 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.setAccountPublicKeyHashBase16 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes account_public_key_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getAccountPublicKeyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes account_public_key_hash = 5;
 * This is a type-conversion wrapper around `getAccountPublicKeyHash()`
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getAccountPublicKeyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountPublicKeyHash()));
};


/**
 * optional bytes account_public_key_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPublicKeyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getAccountPublicKeyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountPublicKeyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.setAccountPublicKeyHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional io.casperlabs.casper.consensus.info.DeployInfo.View view = 2;
 * @return {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.DeployInfo.View} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 page_size = 3;
 * @return {number}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string page_token = 4;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.ListDeployInfosResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.displayName = 'proto.io.casperlabs.node.api.casper.ListDeployInfosResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployInfosList: jspb.Message.toObjectList(msg.getDeployInfosList(),
    io_casperlabs_casper_consensus_info_pb.DeployInfo.toObject, includeInstance),
    nextPageToken: msg.getNextPageToken(),
    prevPageToken: msg.getPrevPageToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.ListDeployInfosResponse;
  return proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new io_casperlabs_casper_consensus_info_pb.DeployInfo;
      reader.readMessage(value,io_casperlabs_casper_consensus_info_pb.DeployInfo.deserializeBinaryFromReader);
      msg.getDeployInfosList().push(value);
      msg.setDeployInfosList(msg.getDeployInfosList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      io_casperlabs_casper_consensus_info_pb.DeployInfo.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPrevPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse} The clone.
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.ListDeployInfosResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated io.casperlabs.casper.consensus.info.DeployInfo deploy_infos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.info.DeployInfo>}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.getDeployInfosList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.info.DeployInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, io_casperlabs_casper_consensus_info_pb.DeployInfo, 1));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.info.DeployInfo>} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.setDeployInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.clearDeployInfosList = function() {
  this.setDeployInfosList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string prev_page_token = 3;
 * @return {string}
 */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.getPrevPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.io.casperlabs.node.api.casper.ListDeployInfosResponse.prototype.setPrevPageToken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.displayName = 'proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    view: msg.getView()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest;
  return proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional io.casperlabs.casper.consensus.info.BlockInfo.View view = 1;
 * @return {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View}
 */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.getView = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.info.BlockInfo.View} value  */
proto.io.casperlabs.node.api.casper.GetLastFinalizedBlockInfoRequest.prototype.setView = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.StreamEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.StreamEventsRequest.displayName = 'proto.io.casperlabs.node.api.casper.StreamEventsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.StreamEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockAdded: msg.getBlockAdded(),
    blockFinalized: msg.getBlockFinalized(),
    deployAdded: msg.getDeployAdded(),
    deployDiscarded: msg.getDeployDiscarded(),
    deployRequeued: msg.getDeployRequeued(),
    deployProcessed: msg.getDeployProcessed(),
    deployFinalized: msg.getDeployFinalized(),
    deployOrphaned: msg.getDeployOrphaned(),
    deployFilter: (f = msg.getDeployFilter()) && proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.toObject(includeInstance, f),
    minEventId: msg.getMinEventId(),
    maxEventId: msg.getMaxEventId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.StreamEventsRequest;
  return proto.io.casperlabs.node.api.casper.StreamEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlockAdded(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlockFinalized(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployAdded(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployDiscarded(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployRequeued(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployProcessed(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployFinalized(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeployOrphaned(value);
      break;
    case 9:
      var value = new proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter;
      reader.readMessage(value,proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.deserializeBinaryFromReader);
      msg.setDeployFilter(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinEventId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxEventId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockAdded();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getBlockFinalized();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getDeployAdded();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getDeployDiscarded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getDeployRequeued();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getDeployProcessed();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getDeployFinalized();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getDeployOrphaned();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getDeployFilter();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.serializeBinaryToWriter
    );
  }
  f = this.getMinEventId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = this.getMaxEventId();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest} The clone.
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StreamEventsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool block_added = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getBlockAdded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setBlockAdded = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool block_finalized = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getBlockFinalized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setBlockFinalized = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool deploy_added = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployAdded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployAdded = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool deploy_discarded = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployDiscarded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployDiscarded = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool deploy_requeued = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployRequeued = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployRequeued = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool deploy_processed = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployProcessed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployProcessed = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool deploy_finalized = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployFinalized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployFinalized = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool deploy_orphaned = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployOrphaned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployOrphaned = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional DeployFilter deploy_filter = 9;
 * @return {proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getDeployFilter = function() {
  return /** @type{proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter, 9));
};


/** @param {proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter|undefined} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setDeployFilter = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.clearDeployFilter = function() {
  this.setDeployFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.hasDeployFilter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 min_event_id = 10;
 * @return {number}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getMinEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setMinEventId = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint64 max_event_id = 11;
 * @return {number}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.getMaxEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.prototype.setMaxEventId = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.displayName = 'proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountPublicKeyHashesList: msg.getAccountPublicKeyHashesList_asB64(),
    deployHashesList: msg.getDeployHashesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter;
  return proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getAccountPublicKeyHashesList().push(value);
      msg.setAccountPublicKeyHashesList(msg.getAccountPublicKeyHashesList());
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getDeployHashesList().push(value);
      msg.setDeployHashesList(msg.getDeployHashesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccountPublicKeyHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = this.getDeployHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} The clone.
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes account_public_key_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getAccountPublicKeyHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes account_public_key_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getAccountPublicKeyHashesList()`
 * @return {!Array.<string>}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getAccountPublicKeyHashesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAccountPublicKeyHashesList()));
};


/**
 * repeated bytes account_public_key_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPublicKeyHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getAccountPublicKeyHashesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAccountPublicKeyHashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.setAccountPublicKeyHashesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.clearAccountPublicKeyHashesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated bytes deploy_hashes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getDeployHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes deploy_hashes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getDeployHashesList()`
 * @return {!Array.<string>}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getDeployHashesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getDeployHashesList()));
};


/**
 * repeated bytes deploy_hashes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.getDeployHashesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDeployHashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.setDeployHashesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.io.casperlabs.node.api.casper.StreamEventsRequest.DeployFilter.prototype.clearDeployHashesList = function() {
  jspb.Message.setField(this, 2, []);
};


goog.object.extend(exports, proto.io.casperlabs.node.api.casper);
