/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var io_casperlabs_casper_consensus_state_pb = require('../../../../io/casperlabs/casper/consensus/state_pb.js');
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Approval', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.Body', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.GlobalState', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.Header', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.Justification', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.MessageRole', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.MessageType', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.BlockSummary', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Bond', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Arg', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Body', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Code', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.Header', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.LegacyArg', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.DeploySummary', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Era', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.GenesisCandidate', null, global);
goog.exportSymbol('proto.io.casperlabs.casper.consensus.Signature', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Signature.displayName = 'proto.io.casperlabs.casper.consensus.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Signature} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigAlgorithm: msg.getSigAlgorithm(),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Signature}
 */
proto.io.casperlabs.casper.consensus.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Signature;
  return proto.io.casperlabs.casper.consensus.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Signature}
 */
proto.io.casperlabs.casper.consensus.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigAlgorithm(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Signature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Signature.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSigAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Signature} The clone.
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Signature} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sig_algorithm = 1;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.getSigAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Signature.prototype.setSigAlgorithm = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes sig = 2;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Signature.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Signature.prototype.setSig = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Approval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Approval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Approval.displayName = 'proto.io.casperlabs.casper.consensus.Approval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Approval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Approval} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Approval.toObject = function(includeInstance, msg) {
  var f, obj = {
    approverPublicKey: msg.getApproverPublicKey_asB64(),
    signature: (f = msg.getSignature()) && proto.io.casperlabs.casper.consensus.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Approval}
 */
proto.io.casperlabs.casper.consensus.Approval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Approval;
  return proto.io.casperlabs.casper.consensus.Approval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Approval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Approval}
 */
proto.io.casperlabs.casper.consensus.Approval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApproverPublicKey(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Signature;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Approval} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Approval.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getApproverPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Approval} The clone.
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Approval} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes approver_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.getApproverPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes approver_public_key = 1;
 * This is a type-conversion wrapper around `getApproverPublicKey()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.getApproverPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApproverPublicKey()));
};


/**
 * optional bytes approver_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApproverPublicKey()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.getApproverPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApproverPublicKey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Approval.prototype.setApproverPublicKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Signature signature = 2;
 * @return {proto.io.casperlabs.casper.consensus.Signature}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.getSignature = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Signature} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Signature, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Signature|undefined} value  */
proto.io.casperlabs.casper.consensus.Approval.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Approval.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Approval.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Deploy.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.displayName = 'proto.io.casperlabs.casper.consensus.Deploy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployHash: msg.getDeployHash_asB64(),
    header: (f = msg.getHeader()) && proto.io.casperlabs.casper.consensus.Deploy.Header.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.io.casperlabs.casper.consensus.Deploy.Body.toObject(includeInstance, f),
    approvalsList: jspb.Message.toObjectList(msg.getApprovalsList(),
    proto.io.casperlabs.casper.consensus.Approval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy}
 */
proto.io.casperlabs.casper.consensus.Deploy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy;
  return proto.io.casperlabs.casper.consensus.Deploy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy}
 */
proto.io.casperlabs.casper.consensus.Deploy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Header;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Body;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.io.casperlabs.casper.consensus.Approval;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Approval.deserializeBinaryFromReader);
      msg.getApprovalsList().push(value);
      msg.setApprovalsList(msg.getApprovalsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Header.serializeBinaryToWriter
    );
  }
  f = this.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Body.serializeBinaryToWriter
    );
  }
  f = this.getApprovalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.io.casperlabs.casper.consensus.Approval.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes deploy_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getDeployHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes deploy_hash = 1;
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getDeployHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployHash()));
};


/**
 * optional bytes deploy_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getDeployHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Deploy.prototype.setDeployHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Header}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getHeader = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Header} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Header, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Header|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Deploy.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Body body = 3;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Body}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getBody = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Body, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Body|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Deploy.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Approval approvals = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Approval>}
 */
proto.io.casperlabs.casper.consensus.Deploy.prototype.getApprovalsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Approval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Approval, 4));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Approval>} value  */
proto.io.casperlabs.casper.consensus.Deploy.prototype.setApprovalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.io.casperlabs.casper.consensus.Deploy.prototype.clearApprovalsList = function() {
  this.setApprovalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Deploy.Header.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Header.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Header';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountPublicKeyHash: msg.getAccountPublicKeyHash_asB64(),
    timestamp: msg.getTimestamp(),
    gasPrice: msg.getGasPrice(),
    bodyHash: msg.getBodyHash_asB64(),
    ttlMillis: msg.getTtlMillis(),
    dependenciesList: msg.getDependenciesList_asB64(),
    chainName: msg.getChainName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Header}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Header;
  return proto.io.casperlabs.casper.consensus.Deploy.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Header}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountPublicKeyHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtlMillis(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getDependenciesList().push(value);
      msg.setDependenciesList(msg.getDependenciesList());
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccountPublicKeyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getBodyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getTtlMillis();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getDependenciesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      7,
      f
    );
  }
  f = this.getChainName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Header} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes account_public_key_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getAccountPublicKeyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes account_public_key_hash = 1;
 * This is a type-conversion wrapper around `getAccountPublicKeyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getAccountPublicKeyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountPublicKeyHash()));
};


/**
 * optional bytes account_public_key_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPublicKeyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getAccountPublicKeyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountPublicKeyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setAccountPublicKeyHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 gas_price = 4;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setGasPrice = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes body_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getBodyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes body_hash = 5;
 * This is a type-conversion wrapper around `getBodyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getBodyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyHash()));
};


/**
 * optional bytes body_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getBodyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setBodyHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 ttl_millis = 6;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getTtlMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setTtlMillis = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated bytes dependencies = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getDependenciesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 7));
};


/**
 * repeated bytes dependencies = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getDependenciesList()`
 * @return {!Array.<string>}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getDependenciesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getDependenciesList()));
};


/**
 * repeated bytes dependencies = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDependenciesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getDependenciesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDependenciesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setDependenciesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.clearDependenciesList = function() {
  jspb.Message.setField(this, 7, []);
};


/**
 * optional string chain_name = 8;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Deploy.Header.prototype.setChainName = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Body.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Body';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Body} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.io.casperlabs.casper.consensus.Deploy.Code.toObject(includeInstance, f),
    payment: (f = msg.getPayment()) && proto.io.casperlabs.casper.consensus.Deploy.Code.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Body}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Body;
  return proto.io.casperlabs.casper.consensus.Deploy.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Body}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Body} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.serializeBinaryToWriter
    );
  }
  f = this.getPayment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Body} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Body} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Code session = 1;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.getSession = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code, 1));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Code payment = 2;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.getPayment = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.setPayment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Body.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Code = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Deploy.Code.repeatedFields_, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Code, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Code.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Code';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.ContractCase = {
  CONTRACT_NOT_SET: 0,
  WASM_CONTRACT: 2,
  STORED_CONTRACT: 3,
  STORED_VERSIONED_CONTRACT: 4,
  TRANSFER_CONTRACT: 5
};

/**
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.ContractCase}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getContractCase = function() {
  return /** @type {proto.io.casperlabs.casper.consensus.Deploy.Code.ContractCase} */(jspb.Message.computeOneofCase(this, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Code.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.toObject = function(includeInstance, msg) {
  var f, obj = {
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.io.casperlabs.casper.consensus.Deploy.Arg.toObject, includeInstance),
    wasmContract: (f = msg.getWasmContract()) && proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.toObject(includeInstance, f),
    storedContract: (f = msg.getStoredContract()) && proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.toObject(includeInstance, f),
    storedVersionedContract: (f = msg.getStoredVersionedContract()) && proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.toObject(includeInstance, f),
    transferContract: (f = msg.getTransferContract()) && proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Code;
  return proto.io.casperlabs.casper.consensus.Deploy.Code.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Arg;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Arg.deserializeBinaryFromReader);
      msg.getArgsList().push(value);
      msg.setArgsList(msg.getArgsList());
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.deserializeBinaryFromReader);
      msg.setWasmContract(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.deserializeBinaryFromReader);
      msg.setStoredContract(value);
      break;
    case 4:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.deserializeBinaryFromReader);
      msg.setStoredVersionedContract(value);
      break;
    case 5:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.deserializeBinaryFromReader);
      msg.setTransferContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Arg.serializeBinaryToWriter
    );
  }
  f = this.getWasmContract();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.serializeBinaryToWriter
    );
  }
  f = this.getStoredContract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.serializeBinaryToWriter
    );
  }
  f = this.getStoredVersionedContract();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.serializeBinaryToWriter
    );
  }
  f = this.getTransferContract();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Code} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Arg args = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Deploy.Arg>}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getArgsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Deploy.Arg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Arg, 1));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Deploy.Arg>} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.setArgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional WasmContract wasm_contract = 2;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getWasmContract = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.setWasmContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.clearWasmContract = function() {
  this.setWasmContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.hasWasmContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StoredContract stored_contract = 3;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getStoredContract = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.setStoredContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.clearStoredContract = function() {
  this.setStoredContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.hasStoredContract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StoredVersionedContract stored_versioned_contract = 4;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getStoredVersionedContract = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract, 4));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.setStoredVersionedContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.clearStoredVersionedContract = function() {
  this.setStoredVersionedContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.hasStoredVersionedContract = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TransferContract transfer_contract = 5;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.getTransferContract = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract, 5));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.setTransferContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.io.casperlabs.casper.consensus.Deploy.Code.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.clearTransferContract = function() {
  this.setTransferContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.prototype.hasTransferContract = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    wasm: msg.getWasm_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract;
  return proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWasm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWasm_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes wasm = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.getWasm = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes wasm = 1;
 * This is a type-conversion wrapper around `getWasm()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.getWasm_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWasm()));
};


/**
 * optional bytes wasm = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWasm()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.getWasm_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWasm()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.WasmContract.prototype.setWasm = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.AddressCase = {
  ADDRESS_NOT_SET: 0,
  PACKAGE_HASH: 1,
  NAME: 2
};

/**
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.AddressCase}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getAddressCase = function() {
  return /** @type {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.AddressCase} */(jspb.Message.computeOneofCase(this, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageHash: msg.getPackageHash_asB64(),
    name: jspb.Message.getField(msg, 2),
    entryPoint: msg.getEntryPoint(),
    version: msg.getVersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract;
  return proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPackageHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getEntryPoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes package_hash = 1;
 * @return {(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getPackageHash = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasPackageHash() ? "" : jspb.Message.getField(this, 1));
};


/**
 * optional bytes package_hash = 1;
 * This is a type-conversion wrapper around `getPackageHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getPackageHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPackageHash()));
};


/**
 * optional bytes package_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPackageHash()`
 * @return {Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getPackageHash_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPackageHash()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.setPackageHash = function(value) {
  jspb.Message.setOneofField(this, 1, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.clearPackageHash = function() {
  jspb.Message.setOneofField(this, 1, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.hasPackageHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string entry_point = 3;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getEntryPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.setEntryPoint = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 version = 4;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.AddressCase = {
  ADDRESS_NOT_SET: 0,
  CONTRACT_HASH: 1,
  NAME: 2
};

/**
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.AddressCase}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getAddressCase = function() {
  return /** @type {proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.AddressCase} */(jspb.Message.computeOneofCase(this, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractHash: msg.getContractHash_asB64(),
    name: jspb.Message.getField(msg, 2),
    entryPoint: msg.getEntryPoint()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract;
  return proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getEntryPoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes contract_hash = 1;
 * @return {(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getContractHash = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasContractHash() ? "" : jspb.Message.getField(this, 1));
};


/**
 * optional bytes contract_hash = 1;
 * This is a type-conversion wrapper around `getContractHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getContractHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractHash()));
};


/**
 * optional bytes contract_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractHash()`
 * @return {Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getContractHash_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractHash()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.setContractHash = function(value) {
  jspb.Message.setOneofField(this, 1, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.clearContractHash = function() {
  jspb.Message.setOneofField(this, 1, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.hasContractHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string entry_point = 3;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.getEntryPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Deploy.Code.StoredContract.prototype.setEntryPoint = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract;
  return proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Code.TransferContract} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.Arg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.Arg.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.Arg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.Arg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Arg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    value: (f = msg.getValue()) && io_casperlabs_casper_consensus_state_pb.CLValueInstance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Arg}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.Arg;
  return proto.io.casperlabs.casper.consensus.Deploy.Arg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Arg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Arg}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new io_casperlabs_casper_consensus_state_pb.CLValueInstance;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.CLValueInstance.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.Arg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      io_casperlabs_casper_consensus_state_pb.CLValueInstance.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.Arg} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.Arg} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional state.CLValueInstance value = 3;
 * @return {proto.io.casperlabs.casper.consensus.state.CLValueInstance}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.getValue = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.CLValueInstance} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.CLValueInstance, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.state.CLValueInstance|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.Arg.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.LegacyArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.LegacyArg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    value: (f = msg.getValue()) && proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.LegacyArg;
  return proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.getValue = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.displayName = 'proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  OPTIONAL_VALUE: 1,
  BYTES_VALUE: 2,
  INT_VALUE: 3,
  INT_LIST: 4,
  STRING_VALUE: 5,
  STRING_LIST: 6,
  LONG_VALUE: 7,
  BIG_INT: 8,
  KEY: 9
};

/**
 * @return {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.ValueCase}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getValueCase = function() {
  return /** @type {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionalValue: (f = msg.getOptionalValue()) && proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.toObject(includeInstance, f),
    bytesValue: msg.getBytesValue_asB64(),
    intValue: jspb.Message.getField(msg, 3),
    intList: (f = msg.getIntList()) && io_casperlabs_casper_consensus_state_pb.IntList.toObject(includeInstance, f),
    stringValue: jspb.Message.getField(msg, 5),
    stringList: (f = msg.getStringList()) && io_casperlabs_casper_consensus_state_pb.StringList.toObject(includeInstance, f),
    longValue: jspb.Message.getField(msg, 7),
    bigInt: (f = msg.getBigInt()) && io_casperlabs_casper_consensus_state_pb.BigInt.toObject(includeInstance, f),
    key: (f = msg.getKey()) && io_casperlabs_casper_consensus_state_pb.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value;
  return proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.deserializeBinaryFromReader);
      msg.setOptionalValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntValue(value);
      break;
    case 4:
      var value = new io_casperlabs_casper_consensus_state_pb.IntList;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.IntList.deserializeBinaryFromReader);
      msg.setIntList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 6:
      var value = new io_casperlabs_casper_consensus_state_pb.StringList;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.StringList.deserializeBinaryFromReader);
      msg.setStringList(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongValue(value);
      break;
    case 8:
      var value = new io_casperlabs_casper_consensus_state_pb.BigInt;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.BigInt.deserializeBinaryFromReader);
      msg.setBigInt(value);
      break;
    case 9:
      var value = new io_casperlabs_casper_consensus_state_pb.Key;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOptionalValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getIntList();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      io_casperlabs_casper_consensus_state_pb.IntList.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStringList();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      io_casperlabs_casper_consensus_state_pb.StringList.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = this.getBigInt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      io_casperlabs_casper_consensus_state_pb.BigInt.serializeBinaryToWriter
    );
  }
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      io_casperlabs_casper_consensus_state_pb.Key.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} The clone.
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Value optional_value = 1;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getOptionalValue = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value, 1));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setOptionalValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearOptionalValue = function() {
  this.setOptionalValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasOptionalValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes bytes_value = 2;
 * @return {(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getBytesValue = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasBytesValue() ? "" : jspb.Message.getField(this, 2));
};


/**
 * optional bytes bytes_value = 2;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getBytesValue_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setBytesValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearBytesValue = function() {
  jspb.Message.setOneofField(this, 2, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 int_value = 3;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getIntValue = function() {
  return /** @type {number} */ (!this.hasIntValue() ? 0 : jspb.Message.getField(this, 3));
};


/** @param {number?|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 3, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional state.IntList int_list = 4;
 * @return {proto.io.casperlabs.casper.consensus.state.IntList}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getIntList = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.IntList} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.IntList, 4));
};


/** @param {proto.io.casperlabs.casper.consensus.state.IntList|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setIntList = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearIntList = function() {
  this.setIntList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasIntList = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string string_value = 5;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getStringValue = function() {
  return /** @type {string} */ (!this.hasStringValue() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string?|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 5, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 5, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional state.StringList string_list = 6;
 * @return {proto.io.casperlabs.casper.consensus.state.StringList}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getStringList = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.StringList} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.StringList, 6));
};


/** @param {proto.io.casperlabs.casper.consensus.state.StringList|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setStringList = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearStringList = function() {
  this.setStringList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasStringList = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 long_value = 7;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getLongValue = function() {
  return /** @type {number} */ (!this.hasLongValue() ? 0 : jspb.Message.getField(this, 7));
};


/** @param {number?|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setLongValue = function(value) {
  jspb.Message.setOneofField(this, 7, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearLongValue = function() {
  jspb.Message.setOneofField(this, 7, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasLongValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional state.BigInt big_int = 8;
 * @return {proto.io.casperlabs.casper.consensus.state.BigInt}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getBigInt = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.BigInt} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.BigInt, 8));
};


/** @param {proto.io.casperlabs.casper.consensus.state.BigInt|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setBigInt = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearBigInt = function() {
  this.setBigInt(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasBigInt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional state.Key key = 9;
 * @return {proto.io.casperlabs.casper.consensus.state.Key}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.getKey = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.Key} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.Key, 9));
};


/** @param {proto.io.casperlabs.casper.consensus.state.Key|undefined} value  */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.setKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.oneofGroups_[0], value);
};


proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Deploy.LegacyArg.Value.prototype.hasKey = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.DeploySummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.DeploySummary.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.DeploySummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.DeploySummary.displayName = 'proto.io.casperlabs.casper.consensus.DeploySummary';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.DeploySummary.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.DeploySummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.DeploySummary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployHash: msg.getDeployHash_asB64(),
    header: (f = msg.getHeader()) && proto.io.casperlabs.casper.consensus.Deploy.Header.toObject(includeInstance, f),
    approvalsList: jspb.Message.toObjectList(msg.getApprovalsList(),
    proto.io.casperlabs.casper.consensus.Approval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.DeploySummary}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.DeploySummary;
  return proto.io.casperlabs.casper.consensus.DeploySummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.DeploySummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.DeploySummary}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Deploy.Header;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Approval;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Approval.deserializeBinaryFromReader);
      msg.getApprovalsList().push(value);
      msg.setApprovalsList(msg.getApprovalsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.DeploySummary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.DeploySummary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeployHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.Header.serializeBinaryToWriter
    );
  }
  f = this.getApprovalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Approval.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.DeploySummary} The clone.
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.DeploySummary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes deploy_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.getDeployHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes deploy_hash = 1;
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.getDeployHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployHash()));
};


/**
 * optional bytes deploy_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.getDeployHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.setDeployHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Deploy.Header header = 2;
 * @return {proto.io.casperlabs.casper.consensus.Deploy.Header}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.getHeader = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy.Header} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy.Header, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy.Header|undefined} value  */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.DeploySummary.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Approval approvals = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Approval>}
 */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.getApprovalsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Approval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Approval, 3));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Approval>} value  */
proto.io.casperlabs.casper.consensus.DeploySummary.prototype.setApprovalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.DeploySummary.prototype.clearApprovalsList = function() {
  this.setApprovalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.BlockSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.BlockSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.BlockSummary.displayName = 'proto.io.casperlabs.casper.consensus.BlockSummary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.BlockSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.BlockSummary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: msg.getBlockHash_asB64(),
    header: (f = msg.getHeader()) && proto.io.casperlabs.casper.consensus.Block.Header.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.io.casperlabs.casper.consensus.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.BlockSummary}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.BlockSummary;
  return proto.io.casperlabs.casper.consensus.BlockSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.BlockSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.BlockSummary}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Block.Header;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Signature;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.BlockSummary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.BlockSummary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Block.Header.serializeBinaryToWriter
    );
  }
  f = this.getSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.BlockSummary} The clone.
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.BlockSummary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes block_hash = 1;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Block.Header header = 2;
 * @return {proto.io.casperlabs.casper.consensus.Block.Header}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.getHeader = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Block.Header} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Block.Header, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Block.Header|undefined} value  */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.BlockSummary.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature signature = 3;
 * @return {proto.io.casperlabs.casper.consensus.Signature}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.getSignature = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Signature} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Signature, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.Signature|undefined} value  */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.BlockSummary.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.BlockSummary.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.displayName = 'proto.io.casperlabs.casper.consensus.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: msg.getBlockHash_asB64(),
    header: (f = msg.getHeader()) && proto.io.casperlabs.casper.consensus.Block.Header.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.io.casperlabs.casper.consensus.Block.Body.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.io.casperlabs.casper.consensus.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block}
 */
proto.io.casperlabs.casper.consensus.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block;
  return proto.io.casperlabs.casper.consensus.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block}
 */
proto.io.casperlabs.casper.consensus.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Block.Header;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Block.Body;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.Body.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.io.casperlabs.casper.consensus.Signature;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Block.Header.serializeBinaryToWriter
    );
  }
  f = this.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Block.Body.serializeBinaryToWriter
    );
  }
  f = this.getSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.casperlabs.casper.consensus.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes block_hash = 1;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {proto.io.casperlabs.casper.consensus.Block.Header}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getHeader = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Block.Header} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Block.Header, 2));
};


/** @param {proto.io.casperlabs.casper.consensus.Block.Header|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Block.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Body body = 3;
 * @return {proto.io.casperlabs.casper.consensus.Block.Body}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getBody = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Block.Body} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Block.Body, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.Block.Body|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Block.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Signature signature = 4;
 * @return {proto.io.casperlabs.casper.consensus.Signature}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.getSignature = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Signature} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Signature, 4));
};


/** @param {proto.io.casperlabs.casper.consensus.Signature|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.casperlabs.casper.consensus.Block.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Block.MessageType = {
  BLOCK: 0,
  BALLOT: 1
};

/**
 * @enum {number}
 */
proto.io.casperlabs.casper.consensus.Block.MessageRole = {
  UNDEFINED: 0,
  PROPOSAL: 1,
  CONFIRMATION: 2,
  WITNESS: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Block.Header.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.Header.displayName = 'proto.io.casperlabs.casper.consensus.Block.Header';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Block.Header.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block.Header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentHashesList: msg.getParentHashesList_asB64(),
    justificationsList: jspb.Message.toObjectList(msg.getJustificationsList(),
    proto.io.casperlabs.casper.consensus.Block.Justification.toObject, includeInstance),
    state: (f = msg.getState()) && proto.io.casperlabs.casper.consensus.Block.GlobalState.toObject(includeInstance, f),
    bodyHash: msg.getBodyHash_asB64(),
    timestamp: msg.getTimestamp(),
    protocolVersion: (f = msg.getProtocolVersion()) && io_casperlabs_casper_consensus_state_pb.ProtocolVersion.toObject(includeInstance, f),
    deployCount: msg.getDeployCount(),
    chainName: msg.getChainName(),
    validatorBlockSeqNum: msg.getValidatorBlockSeqNum(),
    validatorPublicKey: msg.getValidatorPublicKey_asB64(),
    validatorPublicKeyHash: msg.getValidatorPublicKeyHash_asB64(),
    validatorPrevBlockHash: msg.getValidatorPrevBlockHash_asB64(),
    jRank: msg.getJRank(),
    messageType: msg.getMessageType(),
    messageRole: msg.getMessageRole(),
    keyBlockHash: msg.getKeyBlockHash_asB64(),
    roundId: msg.getRoundId(),
    magicBit: msg.getMagicBit(),
    mainRank: msg.getMainRank()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Header}
 */
proto.io.casperlabs.casper.consensus.Block.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block.Header;
  return proto.io.casperlabs.casper.consensus.Block.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Header}
 */
proto.io.casperlabs.casper.consensus.Block.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getParentHashesList().push(value);
      msg.setParentHashesList(msg.getParentHashesList());
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Block.Justification;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.Justification.deserializeBinaryFromReader);
      msg.getJustificationsList().push(value);
      msg.setJustificationsList(msg.getJustificationsList());
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Block.GlobalState;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.GlobalState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 13:
      var value = new io_casperlabs_casper_consensus_state_pb.ProtocolVersion;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.ProtocolVersion.deserializeBinaryFromReader);
      msg.setProtocolVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeployCount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValidatorBlockSeqNum(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKey(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKeyHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPrevBlockHash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setJRank(value);
      break;
    case 12:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.Block.MessageType} */ (reader.readEnum());
      msg.setMessageType(value);
      break;
    case 19:
      var value = /** @type {!proto.io.casperlabs.casper.consensus.Block.MessageRole} */ (reader.readEnum());
      msg.setMessageRole(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyBlockHash(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoundId(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMagicBit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMainRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getParentHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = this.getJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Block.Justification.serializeBinaryToWriter
    );
  }
  f = this.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Block.GlobalState.serializeBinaryToWriter
    );
  }
  f = this.getBodyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getProtocolVersion();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      io_casperlabs_casper_consensus_state_pb.ProtocolVersion.serializeBinaryToWriter
    );
  }
  f = this.getDeployCount();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getChainName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getValidatorBlockSeqNum();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getValidatorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getValidatorPublicKeyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = this.getValidatorPrevBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = this.getJRank();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = this.getMessageType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = this.getMessageRole();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = this.getKeyBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = this.getRoundId();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = this.getMagicBit();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = this.getMainRank();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Header} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.Header} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes parent_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getParentHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes parent_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getParentHashesList()`
 * @return {!Array.<string>}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getParentHashesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentHashesList()));
};


/**
 * repeated bytes parent_hashes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getParentHashesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentHashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setParentHashesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.io.casperlabs.casper.consensus.Block.Header.prototype.clearParentHashesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated Justification justifications = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Block.Justification>}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getJustificationsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Block.Justification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Block.Justification, 2));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Block.Justification>} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setJustificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.Block.Header.prototype.clearJustificationsList = function() {
  this.setJustificationsList([]);
};


/**
 * optional GlobalState state = 3;
 * @return {proto.io.casperlabs.casper.consensus.Block.GlobalState}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getState = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Block.GlobalState} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Block.GlobalState, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.Block.GlobalState|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Block.Header.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes body_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getBodyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes body_hash = 4;
 * This is a type-conversion wrapper around `getBodyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getBodyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyHash()));
};


/**
 * optional bytes body_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getBodyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setBodyHash = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional state.ProtocolVersion protocol_version = 13;
 * @return {proto.io.casperlabs.casper.consensus.state.ProtocolVersion}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getProtocolVersion = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.ProtocolVersion} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.ProtocolVersion, 13));
};


/** @param {proto.io.casperlabs.casper.consensus.state.ProtocolVersion|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setProtocolVersion = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.io.casperlabs.casper.consensus.Block.Header.prototype.clearProtocolVersion = function() {
  this.setProtocolVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.hasProtocolVersion = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 deploy_count = 7;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getDeployCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setDeployCount = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string chain_name = 8;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setChainName = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 validator_block_seq_num = 9;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorBlockSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setValidatorBlockSeqNum = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes validator_public_key = 10;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes validator_public_key = 10;
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKey()));
};


/**
 * optional bytes validator_public_key = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKey()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setValidatorPublicKey = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes validator_public_key_hash = 20;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKeyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 20, ""));
};


/**
 * optional bytes validator_public_key_hash = 20;
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKeyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKeyHash()));
};


/**
 * optional bytes validator_public_key_hash = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPublicKeyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKeyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setValidatorPublicKeyHash = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional bytes validator_prev_block_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPrevBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/**
 * optional bytes validator_prev_block_hash = 14;
 * This is a type-conversion wrapper around `getValidatorPrevBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPrevBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPrevBlockHash()));
};


/**
 * optional bytes validator_prev_block_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPrevBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getValidatorPrevBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPrevBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setValidatorPrevBlockHash = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional uint64 j_rank = 11;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getJRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setJRank = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional MessageType message_type = 12;
 * @return {!proto.io.casperlabs.casper.consensus.Block.MessageType}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getMessageType = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.MessageType} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.Block.MessageType} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setMessageType = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional MessageRole message_role = 19;
 * @return {!proto.io.casperlabs.casper.consensus.Block.MessageRole}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getMessageRole = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.MessageRole} */ (jspb.Message.getFieldProto3(this, 19, 0));
};


/** @param {!proto.io.casperlabs.casper.consensus.Block.MessageRole} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setMessageRole = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional bytes key_block_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getKeyBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/**
 * optional bytes key_block_hash = 15;
 * This is a type-conversion wrapper around `getKeyBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getKeyBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyBlockHash()));
};


/**
 * optional bytes key_block_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getKeyBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setKeyBlockHash = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional uint64 round_id = 16;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getRoundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setRoundId = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional bool magic_bit = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getMagicBit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 17, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setMagicBit = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional uint64 main_rank = 18;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.getMainRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 18, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.Header.prototype.setMainRank = function(value) {
  jspb.Message.setField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block.Body = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Block.Body.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block.Body, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.Body.displayName = 'proto.io.casperlabs.casper.consensus.Block.Body';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Block.Body.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.Body.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block.Body} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Body.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploysList: jspb.Message.toObjectList(msg.getDeploysList(),
    proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Body}
 */
proto.io.casperlabs.casper.consensus.Block.Body.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block.Body;
  return proto.io.casperlabs.casper.consensus.Block.Body.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Body} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Body}
 */
proto.io.casperlabs.casper.consensus.Block.Body.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.deserializeBinaryFromReader);
      msg.getDeploysList().push(value);
      msg.setDeploysList(msg.getDeploysList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Body} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Body.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeploysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Body} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.Body} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ProcessedDeploy deploys = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy>}
 */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.getDeploysList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy, 1));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy>} value  */
proto.io.casperlabs.casper.consensus.Block.Body.prototype.setDeploysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.io.casperlabs.casper.consensus.Block.Body.prototype.clearDeploysList = function() {
  this.setDeploysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block.Justification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block.Justification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.Justification.displayName = 'proto.io.casperlabs.casper.consensus.Block.Justification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.Justification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block.Justification} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorPublicKeyHash: msg.getValidatorPublicKeyHash_asB64(),
    latestBlockHash: msg.getLatestBlockHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Justification}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block.Justification;
  return proto.io.casperlabs.casper.consensus.Block.Justification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Justification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Justification}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKeyHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block.Justification} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Justification.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidatorPublicKeyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getLatestBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block.Justification} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.Justification} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getValidatorPublicKeyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getValidatorPublicKeyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKeyHash()));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getValidatorPublicKeyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKeyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.setValidatorPublicKeyHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes latest_block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getLatestBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes latest_block_hash = 2;
 * This is a type-conversion wrapper around `getLatestBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getLatestBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestBlockHash()));
};


/**
 * optional bytes latest_block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.getLatestBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.Justification.prototype.setLatestBlockHash = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.displayName = 'proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploy: (f = msg.getDeploy()) && proto.io.casperlabs.casper.consensus.Deploy.toObject(includeInstance, f),
    cost: msg.getCost(),
    isError: msg.getIsError(),
    errorMessage: msg.getErrorMessage(),
    stage: msg.getStage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy;
  return proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.casperlabs.casper.consensus.Deploy;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Deploy.deserializeBinaryFromReader);
      msg.setDeploy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCost(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsError(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeploy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.casperlabs.casper.consensus.Deploy.serializeBinaryToWriter
    );
  }
  f = this.getCost();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getIsError();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getStage();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Deploy deploy = 1;
 * @return {proto.io.casperlabs.casper.consensus.Deploy}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.getDeploy = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.Deploy} */ (
    jspb.Message.getWrapperField(this, proto.io.casperlabs.casper.consensus.Deploy, 1));
};


/** @param {proto.io.casperlabs.casper.consensus.Deploy|undefined} value  */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.setDeploy = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.clearDeploy = function() {
  this.setDeploy(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.hasDeploy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 cost = 2;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.setCost = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool is_error = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.getIsError = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.setIsError = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string error_message = 4;
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.setErrorMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 stage = 5;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Block.ProcessedDeploy.prototype.setStage = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Block.GlobalState.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Block.GlobalState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Block.GlobalState.displayName = 'proto.io.casperlabs.casper.consensus.Block.GlobalState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Block.GlobalState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Block.GlobalState} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.toObject = function(includeInstance, msg) {
  var f, obj = {
    preStateHash: msg.getPreStateHash_asB64(),
    postStateHash: msg.getPostStateHash_asB64(),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.io.casperlabs.casper.consensus.Bond.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Block.GlobalState}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Block.GlobalState;
  return proto.io.casperlabs.casper.consensus.Block.GlobalState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Block.GlobalState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Block.GlobalState}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreStateHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPostStateHash(value);
      break;
    case 3:
      var value = new proto.io.casperlabs.casper.consensus.Bond;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Bond.deserializeBinaryFromReader);
      msg.getBondsList().push(value);
      msg.setBondsList(msg.getBondsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Block.GlobalState} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPreStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPostStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.casperlabs.casper.consensus.Bond.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Block.GlobalState} The clone.
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Block.GlobalState} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes pre_state_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPreStateHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes pre_state_hash = 1;
 * This is a type-conversion wrapper around `getPreStateHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPreStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreStateHash()));
};


/**
 * optional bytes pre_state_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreStateHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPreStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreStateHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.setPreStateHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes post_state_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPostStateHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes post_state_hash = 2;
 * This is a type-conversion wrapper around `getPostStateHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPostStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPostStateHash()));
};


/**
 * optional bytes post_state_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPostStateHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getPostStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPostStateHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.setPostStateHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Bond bonds = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Bond>}
 */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.getBondsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Bond>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Bond, 3));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Bond>} value  */
proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Block.GlobalState.prototype.clearBondsList = function() {
  this.setBondsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Bond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Bond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Bond.displayName = 'proto.io.casperlabs.casper.consensus.Bond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Bond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Bond} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Bond.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorPublicKeyHash: msg.getValidatorPublicKeyHash_asB64(),
    stake: (f = msg.getStake()) && io_casperlabs_casper_consensus_state_pb.BigInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Bond}
 */
proto.io.casperlabs.casper.consensus.Bond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Bond;
  return proto.io.casperlabs.casper.consensus.Bond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Bond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Bond}
 */
proto.io.casperlabs.casper.consensus.Bond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorPublicKeyHash(value);
      break;
    case 3:
      var value = new io_casperlabs_casper_consensus_state_pb.BigInt;
      reader.readMessage(value,io_casperlabs_casper_consensus_state_pb.BigInt.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Bond} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Bond.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidatorPublicKeyHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getStake();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      io_casperlabs_casper_consensus_state_pb.BigInt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Bond} The clone.
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Bond} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.getValidatorPublicKeyHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.getValidatorPublicKeyHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorPublicKeyHash()));
};


/**
 * optional bytes validator_public_key_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorPublicKeyHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.getValidatorPublicKeyHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorPublicKeyHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Bond.prototype.setValidatorPublicKeyHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional state.BigInt stake = 3;
 * @return {proto.io.casperlabs.casper.consensus.state.BigInt}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.getStake = function() {
  return /** @type{proto.io.casperlabs.casper.consensus.state.BigInt} */ (
    jspb.Message.getWrapperField(this, io_casperlabs_casper_consensus_state_pb.BigInt, 3));
};


/** @param {proto.io.casperlabs.casper.consensus.state.BigInt|undefined} value  */
proto.io.casperlabs.casper.consensus.Bond.prototype.setStake = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.casperlabs.casper.consensus.Bond.prototype.clearStake = function() {
  this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.io.casperlabs.casper.consensus.Bond.prototype.hasStake = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.GenesisCandidate.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.GenesisCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.GenesisCandidate.displayName = 'proto.io.casperlabs.casper.consensus.GenesisCandidate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.GenesisCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.GenesisCandidate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: msg.getBlockHash_asB64(),
    approvalsList: jspb.Message.toObjectList(msg.getApprovalsList(),
    proto.io.casperlabs.casper.consensus.Approval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.GenesisCandidate}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.GenesisCandidate;
  return proto.io.casperlabs.casper.consensus.GenesisCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.GenesisCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.GenesisCandidate}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = new proto.io.casperlabs.casper.consensus.Approval;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Approval.deserializeBinaryFromReader);
      msg.getApprovalsList().push(value);
      msg.setApprovalsList(msg.getApprovalsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.GenesisCandidate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getApprovalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.casperlabs.casper.consensus.Approval.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.GenesisCandidate} The clone.
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.GenesisCandidate} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes block_hash = 1;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Approval approvals = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Approval>}
 */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.getApprovalsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Approval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Approval, 2));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Approval>} value  */
proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.setApprovalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.io.casperlabs.casper.consensus.GenesisCandidate.prototype.clearApprovalsList = function() {
  this.setApprovalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.casperlabs.casper.consensus.Era = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.casperlabs.casper.consensus.Era.repeatedFields_, null);
};
goog.inherits(proto.io.casperlabs.casper.consensus.Era, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.casperlabs.casper.consensus.Era.displayName = 'proto.io.casperlabs.casper.consensus.Era';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.casperlabs.casper.consensus.Era.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.toObject = function(opt_includeInstance) {
  return proto.io.casperlabs.casper.consensus.Era.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.casperlabs.casper.consensus.Era} msg The msg instance to transform.
 * @return {!Object}
 */
proto.io.casperlabs.casper.consensus.Era.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyBlockHash: msg.getKeyBlockHash_asB64(),
    parentKeyBlockHash: msg.getParentKeyBlockHash_asB64(),
    startTick: msg.getStartTick(),
    endTick: msg.getEndTick(),
    bookingBlockHash: msg.getBookingBlockHash_asB64(),
    leaderSeed: msg.getLeaderSeed_asB64(),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.io.casperlabs.casper.consensus.Bond.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.casperlabs.casper.consensus.Era}
 */
proto.io.casperlabs.casper.consensus.Era.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.casperlabs.casper.consensus.Era;
  return proto.io.casperlabs.casper.consensus.Era.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.casperlabs.casper.consensus.Era} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.casperlabs.casper.consensus.Era}
 */
proto.io.casperlabs.casper.consensus.Era.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyBlockHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentKeyBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTick(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBookingBlockHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaderSeed(value);
      break;
    case 7:
      var value = new proto.io.casperlabs.casper.consensus.Bond;
      reader.readMessage(value,proto.io.casperlabs.casper.consensus.Bond.deserializeBinaryFromReader);
      msg.getBondsList().push(value);
      msg.setBondsList(msg.getBondsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.io.casperlabs.casper.consensus.Era} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Era.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.io.casperlabs.casper.consensus.Era.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getParentKeyBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getStartTick();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getEndTick();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getBookingBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getLeaderSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.io.casperlabs.casper.consensus.Bond.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.io.casperlabs.casper.consensus.Era} The clone.
 */
proto.io.casperlabs.casper.consensus.Era.prototype.cloneMessage = function() {
  return /** @type {!proto.io.casperlabs.casper.consensus.Era} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes key_block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getKeyBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes key_block_hash = 1;
 * This is a type-conversion wrapper around `getKeyBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getKeyBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyBlockHash()));
};


/**
 * optional bytes key_block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getKeyBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setKeyBlockHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes parent_key_block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getParentKeyBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes parent_key_block_hash = 2;
 * This is a type-conversion wrapper around `getParentKeyBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getParentKeyBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentKeyBlockHash()));
};


/**
 * optional bytes parent_key_block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentKeyBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getParentKeyBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentKeyBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setParentKeyBlockHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 start_tick = 3;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getStartTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setStartTick = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 end_tick = 4;
 * @return {number}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getEndTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setEndTick = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes booking_block_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getBookingBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes booking_block_hash = 5;
 * This is a type-conversion wrapper around `getBookingBlockHash()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getBookingBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBookingBlockHash()));
};


/**
 * optional bytes booking_block_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBookingBlockHash()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getBookingBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBookingBlockHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setBookingBlockHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes leader_seed = 6;
 * @return {!(string|Uint8Array)}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getLeaderSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes leader_seed = 6;
 * This is a type-conversion wrapper around `getLeaderSeed()`
 * @return {string}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getLeaderSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaderSeed()));
};


/**
 * optional bytes leader_seed = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaderSeed()`
 * @return {!Uint8Array}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getLeaderSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaderSeed()));
};


/** @param {!(string|Uint8Array)} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setLeaderSeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated Bond bonds = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.io.casperlabs.casper.consensus.Bond>}
 */
proto.io.casperlabs.casper.consensus.Era.prototype.getBondsList = function() {
  return /** @type{!Array.<!proto.io.casperlabs.casper.consensus.Bond>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.casperlabs.casper.consensus.Bond, 7));
};


/** @param {Array.<!proto.io.casperlabs.casper.consensus.Bond>} value  */
proto.io.casperlabs.casper.consensus.Era.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.io.casperlabs.casper.consensus.Era.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


goog.object.extend(exports, proto.io.casperlabs.casper.consensus);
