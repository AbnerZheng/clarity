import { expect } from 'chai';
import {
  DeployHeader,
  ModuleBytes,
  serializeBody,
  serializeHeader,
  StoredContractByHash,
  StoredContractByName,
  StoredVersionedContractByName
} from './DeployUtil';
import { decodeBase16 } from 'casperlabs-sdk';
import blake from 'blakejs';

describe(`serialize deploy`, () => {
  it('should serialize deploy header correctly', () => {
    let deployHeader: DeployHeader = {
      account: decodeBase16(
        'a2302e37e5c81503ff9c4555c2005698c7406b87473f3bca07a5c165fe657a4b'
      ),
      bodyHash: decodeBase16(
        '788ada030e913f5b437bd007413cdb79a044e3ba1ed9b0bb3bd4a1ed0a9c593d'
      ),
      chainName: 'casper-example',
      dependencies: [
        decodeBase16(
          'e6943c8d9b3c865f0d4cae5fa18b5e5acf1ab431a6cf3b285b0ce9420279f53f'
        ),
        decodeBase16(
          '496dcc0ffe1172547875fe7dbfcdf096b316b53818d0660fcd95695aa300c160'
        ),
        decodeBase16(
          'c4aba3a516131d7669ea7013c6558f0841767a887f407b9a6a0789f1153992e5'
        )
      ],
      gasPrice: 12,
      timestamp: 1603195118275,
      ttl: 1436355
    };

    let bytes = serializeHeader(deployHeader);

    expect(bytes).to.deep.eq(
      Uint8Array.from([
        1,
        32,
        0,
        0,
        0,
        162,
        48,
        46,
        55,
        229,
        200,
        21,
        3,
        255,
        156,
        69,
        85,
        194,
        0,
        86,
        152,
        199,
        64,
        107,
        135,
        71,
        63,
        59,
        202,
        7,
        165,
        193,
        101,
        254,
        101,
        122,
        75,
        195,
        34,
        224,
        69,
        117,
        1,
        0,
        0,
        195,
        234,
        21,
        0,
        0,
        0,
        0,
        0,
        12,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        120,
        138,
        218,
        3,
        14,
        145,
        63,
        91,
        67,
        123,
        208,
        7,
        65,
        60,
        219,
        121,
        160,
        68,
        227,
        186,
        30,
        217,
        176,
        187,
        59,
        212,
        161,
        237,
        10,
        156,
        89,
        61,
        3,
        0,
        0,
        0,
        230,
        148,
        60,
        141,
        155,
        60,
        134,
        95,
        13,
        76,
        174,
        95,
        161,
        139,
        94,
        90,
        207,
        26,
        180,
        49,
        166,
        207,
        59,
        40,
        91,
        12,
        233,
        66,
        2,
        121,
        245,
        63,
        73,
        109,
        204,
        15,
        254,
        17,
        114,
        84,
        120,
        117,
        254,
        125,
        191,
        205,
        240,
        150,
        179,
        22,
        181,
        56,
        24,
        208,
        102,
        15,
        205,
        149,
        105,
        90,
        163,
        0,
        193,
        96,
        196,
        171,
        163,
        165,
        22,
        19,
        29,
        118,
        105,
        234,
        112,
        19,
        198,
        85,
        143,
        8,
        65,
        118,
        122,
        136,
        127,
        64,
        123,
        154,
        106,
        7,
        137,
        241,
        21,
        57,
        146,
        229,
        14,
        0,
        0,
        0,
        99,
        97,
        115,
        112,
        101,
        114,
        45,
        101,
        120,
        97,
        109,
        112,
        108,
        101
      ])
    );
  });

  it('should serialize ExecutableDeployItem correctly', () => {
    let storedVersionedContractByName = new StoredVersionedContractByName(
      'F0QIGqhM2VUupILZtlWJ',
      null,
      'mvIuUaQFcuNCe1h8vLrJ',
      decodeBase16(
        '3c804912c48731dd952523512ae2804be13902f154cea020ecf52203fd07d3696c1c4b17910ca038519fe9857231132217dd9299902209c4c63d9a162a855c11d2c09f3bdecb7c07532a381402d0ef1d976e'
      )
    );
    const bytes1 = storedVersionedContractByName.toBytes();
    expect(bytes1).to.deep.eq(
      Uint8Array.from([
        4,
        20,
        0,
        0,
        0,
        70,
        48,
        81,
        73,
        71,
        113,
        104,
        77,
        50,
        86,
        85,
        117,
        112,
        73,
        76,
        90,
        116,
        108,
        87,
        74,
        0,
        20,
        0,
        0,
        0,
        109,
        118,
        73,
        117,
        85,
        97,
        81,
        70,
        99,
        117,
        78,
        67,
        101,
        49,
        104,
        56,
        118,
        76,
        114,
        74,
        82,
        0,
        0,
        0,
        60,
        128,
        73,
        18,
        196,
        135,
        49,
        221,
        149,
        37,
        35,
        81,
        42,
        226,
        128,
        75,
        225,
        57,
        2,
        241,
        84,
        206,
        160,
        32,
        236,
        245,
        34,
        3,
        253,
        7,
        211,
        105,
        108,
        28,
        75,
        23,
        145,
        12,
        160,
        56,
        81,
        159,
        233,
        133,
        114,
        49,
        19,
        34,
        23,
        221,
        146,
        153,
        144,
        34,
        9,
        196,
        198,
        61,
        154,
        22,
        42,
        133,
        92,
        17,
        210,
        192,
        159,
        59,
        222,
        203,
        124,
        7,
        83,
        42,
        56,
        20,
        2,
        208,
        239,
        29,
        151,
        110
      ])
    );
    let storedContractByName = new StoredContractByName(
      'q0JOLs3z4TnYQJ5UjVRN',
      '9jkjQT6fZe5mX8uOa3LX',
      decodeBase16('21d07c9469ed4f')
    );
    const bytes2 = storedContractByName.toBytes();
    expect(bytes2).to.deep.eq(
      Uint8Array.from([
        2,
        20,
        0,
        0,
        0,
        113,
        48,
        74,
        79,
        76,
        115,
        51,
        122,
        52,
        84,
        110,
        89,
        81,
        74,
        53,
        85,
        106,
        86,
        82,
        78,
        20,
        0,
        0,
        0,
        57,
        106,
        107,
        106,
        81,
        84,
        54,
        102,
        90,
        101,
        53,
        109,
        88,
        56,
        117,
        79,
        97,
        51,
        76,
        88,
        7,
        0,
        0,
        0,
        33,
        208,
        124,
        148,
        105,
        237,
        79
      ])
    );
    const moduleTypes = new ModuleBytes(
      decodeBase16('d1f026ad8dcfbb557f0fd1ffcb'),
      decodeBase16(
        'baa295ceae8ed6e4100ecd30c11421b516d1ffcbccbe70cdc3cc9155f8b423b1a4ecf42c796994115efdc5785c2e0827b97a2486e56de0f3'
      )
    );
    const bytes3 = moduleTypes.toBytes();
    expect(bytes3).to.deep.eq(
      Uint8Array.from([
        0,
        13,
        0,
        0,
        0,
        209,
        240,
        38,
        173,
        141,
        207,
        187,
        85,
        127,
        15,
        209,
        255,
        203,
        56,
        0,
        0,
        0,
        186,
        162,
        149,
        206,
        174,
        142,
        214,
        228,
        16,
        14,
        205,
        48,
        193,
        20,
        33,
        181,
        22,
        209,
        255,
        203,
        204,
        190,
        112,
        205,
        195,
        204,
        145,
        85,
        248,
        180,
        35,
        177,
        164,
        236,
        244,
        44,
        121,
        105,
        148,
        17,
        94,
        253,
        197,
        120,
        92,
        46,
        8,
        39,
        185,
        122,
        36,
        134,
        229,
        109,
        224,
        243
      ])
    );
  });
  it('should serialize deploy body and compute body hash correctly', () => {
    const payment = new ModuleBytes(
      decodeBase16('d1f026ad8dcfbb557f0fd1ffcb'),
      decodeBase16(
        'baa295ceae8ed6e4100ecd30c11421b516d1ffcbccbe70cdc3cc9155f8b423b1a4ecf42c796994115efdc5785c2e0827b97a2486e56de0f3'
      )
    );
    const session = new StoredVersionedContractByName(
      'B47xrj4zEvhMoQljqe7I',
      1520349790,
      'pAl1RTT90ytJTkiNifaQ',
      decodeBase16(
        '6dc9b52620d47c7c53e332fd7e769668caaf98d4841ec134b3592dd5200f526ac5ae1a3de6a4848bb742ab9eceab4bceab84ba618707cbaf4bb1b1e3ef22e00670f50cb8b6'
      )
    );

    const serializedBody = serializeBody(payment, session);
    const bodyHash = blake.blake2b(serializedBody, null, 32);
    expect(bodyHash).to.deep.eq(
      decodeBase16(
        '11249f65cc0190c5ea2a8d040e5ef4d4ca1d67a91849c43890feb665d4babe39'
      )
    );
  });
});
